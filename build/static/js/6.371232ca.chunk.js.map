{"version":3,"file":"static/js/6.371232ca.chunk.js","mappings":"qKAGA,MAEA,EAFsBA,KAAMC,EAAAA,EAAAA,YAAWC,EAAAA,G,eCAvC,MAEA,EAFmBC,KAAMF,EAAAA,EAAAA,YAAWG,EAAAA,G,0BCMpC,MAAMC,GAASC,EAAAA,EAAAA,OAAK,IAAM,kEAKX,SAASC,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,eAAc,CAAEC,SAAU,MACrCC,GAAWF,EAAAA,EAAAA,eAAc,CAAEG,SAAU,IAAKF,SAAU,MACpDG,GAAWJ,EAAAA,EAAAA,eAAc,CAAEG,SAAU,IAAKF,SAAU,OACpDI,GAAYL,EAAAA,EAAAA,eAAc,CAAEG,SAAU,KAAMF,SAAU,QACtD,UAAEK,GAAcZ,KAChB,iBAAEa,GAAqBhB,IAgB7B,OAdAiB,EAAAA,EAAAA,YAAU,KAEND,EADER,EACe,MACRG,EACQ,KACRE,EACQ,KAEA,KAGnB,GACC,CAACL,EAAUG,EAAUE,EAAUC,KAGhCI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,0CAAyCD,SAAA,EACtDE,EAAAA,EAAAA,KAACjB,EAAM,KACPiB,EAAAA,EAAAA,KAACC,EAAAA,GAAM,OAGRR,IAAaO,EAAAA,EAAAA,KAACE,EAAAA,EAAO,MAI5B,C","sources":["hooks/useDialogSize.tsx","hooks/useLoading.ts","layouts/index.tsx"],"sourcesContent":["import { useContext } from 'react';\r\nimport { DialogSizeContext } from '../contexts/DialogSizeContext';\r\n\r\nconst useDialogSize = () => useContext(DialogSizeContext);\r\n\r\nexport default useDialogSize;","import { useContext } from \"react\";\r\nimport { LoadingContext } from \"../contexts/LoadingContext\";\r\n\r\nconst useLoading = () => useContext(LoadingContext);\r\n\r\nexport default useLoading;\r\n","import { lazy, useEffect } from \"react\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport useDialogSize from \"../hooks/useDialogSize\";\r\nimport useLoading from \"../hooks/useLoading\";\r\nimport Loading from \"../components/Loading\";\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\nconst Navbar = lazy(() => import('./Navbar'))\r\nconst Footer = lazy(() => import('./Footer'))\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\nexport default function LandingLayout() {\r\n  const isMobile = useMediaQuery({ maxWidth: 480 });\r\n  const isTablet = useMediaQuery({ minWidth: 480, maxWidth: 768 });\r\n  const isLaptop = useMediaQuery({ minWidth: 768, maxWidth: 1024 });\r\n  const isDesktop = useMediaQuery({ minWidth: 1024, maxWidth: 1280 });\r\n  const { isLoading } = useLoading()\r\n  const { setDialogSizeAct } = useDialogSize()\r\n\r\n  useEffect(() => {\r\n    if (isMobile) {\r\n      setDialogSizeAct('xxl')\r\n    } else if (isTablet) {\r\n      setDialogSizeAct('xl')\r\n    } else if (isLaptop) {\r\n      setDialogSizeAct('md')\r\n    } else if (isDesktop) {\r\n      setDialogSizeAct('sm')\r\n    } else {\r\n      setDialogSizeAct('sm')\r\n    }\r\n  }, [isMobile, isTablet, isLaptop, isDesktop])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"min-h-screen flex flex-col bg-[#111111]\">\r\n        <Navbar />\r\n        <Outlet />\r\n        {/* <Footer /> */}\r\n      </div>\r\n      {isLoading && <Loading />}\r\n    </>\r\n\r\n  )\r\n}"],"names":["useDialogSize","useContext","DialogSizeContext","useLoading","LoadingContext","Navbar","lazy","LandingLayout","isMobile","useMediaQuery","maxWidth","isTablet","minWidth","isLaptop","isDesktop","isLoading","setDialogSizeAct","useEffect","_jsxs","_Fragment","children","className","_jsx","Outlet","Loading"],"sourceRoot":""}